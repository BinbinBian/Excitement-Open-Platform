{"name":"EOP","tagline":"Excitement Open Platform for Recognizing Textual Entailment","body":"## Introduction\r\n\r\nThe Excitement Open Platform (EOP) is a generic architecture and a comprehensive implementation for textual inference in multiple languages. The platform includes state-of-art algorithms, a large number of knowledge resources, and facilities for experimenting and testing innovative approaches. The EOP is one of the main outcomes of the project <a href=\"http://www.excitement-project.eu/\" target=\"_blank\">EXCITEMENT - EXploring Customer Interactions through Textual EntailMENT</a>. The Platform includes readily-available [Recognizing Textual Entailment](#Recognizing Textual Entailment) (RTE) technology, and a modular [architecture](#Architecture) <architecture> for text preprocessing, entailment engines and several knowledge resources. The current EOP version covers three languages (i.e. English, German, Italian) and includes tools for creating new resources in other languages. The EOP has been designed to be used in several research [use cases](#Use Cases) and its [distribution](#Distribution) package provides a number of utilities.\r\n\r\n***\r\n\r\n## Recognizing Textual Entailment [Recognizing Textual Entailment]\r\n\r\n<p align=\"justify\">\r\nGiven two text fragments, one named Text (T) and the other named Hypothesis (H), the task consists in recognizing whether the hypothesis can be inferred from the text, e.g.,\r\n</p>\r\n\r\n```\r\nT: Obama was born in Hawaii \r\nH1: Obama was born in America \r\nH2: Obama was born in Kenya \r\n\r\nT entails H1 but not H2 \r\n```\r\n\r\n***\r\n\r\n## Architecture\r\n\r\n<p align=\"justify\">\r\n<img src=\"http://hlt-services4.fbk.eu:8080/artifactory/repo/eop_website/images/EOP-Architecture.gif\" alt=\"EOP Architecture\" align=\"left\" width=\"60%\" height=\"60%\"> The EOP takes T-H pairs as input and the output is an entailment judgement, represented by \"Entailment\" if T entails H, or \"NonEntailment\" if the relation does not hold. The EOP architecture is based on the concept of modularization with pluggable and replaceable components to enable extension and customization. <br> <br>\r\n\r\nThe Linguistic Analysis Pipeline (LAP) is a collection of annotation components for Natural Language Processing (NLP) where component integration is based on the Apache UIMA framework. It enables interoperability among components while ensuring language independence. <br><br>\r\n\r\nThe Entailment Decision Algorithm (EDA) computes an entailment decision for a given T-H pair, and can use components that provide standardized algorithms or knowledge resources. Currently, EOP ships with three EDAs each following a different approach: transformation-based, edit-distance based, and classification based. <br><br>\r\n\r\nKnowledge Resources are crucial to recognize cases where T and H use different textual expressions (words, phrases) while preserving entailment (e.g., home --> house, Hawaii --> America, born in --> citizen of). EOP includes a wide range of knowledge resources, including lexical and syntactic resources, where some of them are grabbed from manual resources, like dictionaries, while others are learned automatically.\r\n</p>\r\n\r\n***\r\n\r\n## Use Cases\r\n\r\n* Applied Textual Entailment: users not interested in details of RTE but in NLP tasks in which textual entailment can take over part of or all of the semantic processing, such as Question Answering or Intelligent Tutoring. \r\n* Textual Entailment Development: researchers interested in RTE itself, for example with the goal of developing novel algorithms for detecting entailment. \r\n* Lexical Semantics Evaluation: researchers whose primary interest is in (lexical) semantics. They want to integrate knowledge resources into the EOP platform and measure their impact on deciding textual entailment.\r\n* Educational Use: EOP as an educational tool to support academic courses and projects on RTE and inference more generally.\r\n\r\n***\r\n\r\n## Distribution\r\n\r\n* Communication channels: users/developers mailing list and issue tracking system.\r\n* Build Automation Tool: EOP as a Maven multi-modules project, with all modules sharing the same Maven standard structure, making it easier to find files in the project once one is used to Maven.  \r\n* Version Control System: GitHub for code and documentation storage, development, and issue tracking.    \r\n* Continuous Integration: Jenkins for Continuous Integration, a software development practice where developers of a team integrate their work frequently (e.g., daily).\r\n* Results Archive: as a new feature for community building; EOP users share their experiments and results in a dedicated repository.\r\n* Licence: General Public License (GPL) Version 3.  \r\n\r\n***\r\n\r\n## References\r\n\r\nB. Magnini, R. Zanoli, I. Dagan, K. Eichler, G. Neumann, T.-Gil. Noh, S. Pado, A. Stern, O. Levy  \r\n<a href=\"http://u.cs.biu.ac.il/~dagan/publications/the-excitement-open-platform-for-textual-inferences-acl-2014.pdf\" target=\"_blank\">The Excitement Open Platform for Textual Inferences.</a> In proceedings of ACL demo session, June 2014.\r\n\r\nS. Pado, T.-G. Noh, A. Stern, R. Wang, R. Zanoli\r\n<a href=\"http://journals.cambridge.org/action/displayAbstract?fromPage=online&aid=9115155&fulltextType=RA&fileId=S1351324913000351\" target=\"_blank\">Design and Realization of a Modular Architecture for Textual Entailment.</a> Natural Language Engineering. Cambridge University Press, 2014. \r\n\r\n\r\n\r\n","google":"UA-000000-01","note":"Don't delete this file! It's used internally to help with page regeneration."}