package eu.excitementproject.eop.common.utilities.configuration;

import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.Vector;

import eu.excitementproject.eop.common.datastructures.KeyCaseInsensitiveHashTable;
import eu.excitementproject.eop.common.utilities.DictionaryRegExp;
import eu.excitementproject.eop.common.utilities.StringUtil;
import eu.excitementproject.eop.common.utilities.DictionaryRegExp.DictionaryRegExpException;
import eu.excitementproject.eop.common.utilities.file.FileUtils;


/**
 * <B>This class has to be removed, since Excitement uses another type of
 * configuration files.</B>
 * 
 * ConfigurationParams is an elaborated Hash table of Strings (keys are case
 * insensitive) with extra checks, used to represent one xml file
 * module/submodule, mapping parameter names to their values
 * <p>
 * The classes {@link ConfigurationFile} and {@link ConfigurationParams} use the
 * JaxB jars {@link https://jaxb.dev.java.net/} to provide a comprehensive and
 * more user friendly Java interface to XML files. They depend on the JaxB jar
 * files in JARS
 * 
 * <p>
 * See examples in Demo.xml, Demo.java
 * </p>
 * 
 * <p>
 * A good xml file for these classes would look like this:
 * <p>
 * {@code
 *  	<?xml version="1.0"?>
	
		<!DOCTYPE page [
		<!ENTITY jars "\\nlp-srv\jars\">		<!-- SOME COMMENT -->
		<!ENTITY stopwords "\\nlp-srv\Data\RESOURCES\stopwords-Eyal.txt">
		]>
		
		<configuration>
		
		<module name="logging">
			<param name="main-output-dir">\\nlp-srv\amnon\temp</param>
			<param name="experiment-name">rank dev</param>
			<param name="__COMMENTED-OUT-MODULE">mailer</param>
			<param name="log-file-max-size">500MB</param>
		</module>
		
		<!-- main module for LexicalGraph-->
		<module name="lexical inference">
			<param name="num of expansions">2</param>		<!-- number of steps when building the graph -->
			<param name="senses to use">1</param>			<!-- wn senses of seeds will be set to those sense numbers -->  
		</module>
		
		</configuration>
	}
 * <p>
 * Here's an example client code snippet:
 * <p>
 * The {@link ConfigurationParams} has also the ability to expand environment
 * variables, i.e. for each value, substitute the value of environment variable
 * to its actual value, as it is set by the OS. Environment variables are
 * recognized by either %ENVIRONMENT_VARIABLE_NAME% or
 * $ENVIRONMENT_VARIABLE_NAME or ${ENVIRONMENT_VARIABLE_NAME}. <BR>
 * Note that by default environment variables are <B>not</B> expanded. The user
 * has to explicitly set the configuration-param to expand environment
 * variables, by calling {@link #setExpandingEnvironmentVariables(boolean)}.
 * <p>
 * 
 * Here is an example code: <code>
 * <pre>	
 * ConfigurationFile conf = new ConfigurationFile(new File(fileName), true);
 * ConfigurationParams params = conf.getModuleConfiguration("data set");
 * File topDir = params.getFile("top-dir");
 * File gsFile = params.getFile("gold-standard-file");
 * List<String> topics = null;
 * if(params.containsKey("topics")){
 * 	topics = params.getStringList("topics");
 * }
 * </pre>
 * <code>
 * 
 * @see ConfigurationFile
 * @author BIU NLP legacy-code
 */
public class ConfigurationParams extends AbstractConfigurationParams //extends KeyCaseInsensitiveHashTable<String>
{

	// /////////////////////////////////////////////////////////////// public
	// section ////////////////////////////////////////////////////////

	/**
	 * Constructor with empty ConfigurationFile
	 */
	public ConfigurationParams()
	{
		super();
		m_ref = null;
	}

	/**
	 * Constructor
	 * 
	 * @param iRef
	 *            ConfigurationFile
	 */
	public ConfigurationParams(ConfigurationFile iRef)
	{
		this();
		m_ref = iRef;
	}

	/**
	 * Constructor
	 * 
	 * @param iRef
	 *            ConfigurationFile
	 * @param iModuleName
	 */
	public ConfigurationParams(ConfigurationFile iRef, String iModuleName)
	{
		this(iRef);
		m_moduleName = iModuleName;
	}
	
	
	/**
	 * Create ConfigurationParams for a module, based on a file-name and a module-name, with expanding environment variables.
	 * @throws ConfigurationException 
	 * @throws ConfigurationFileDuplicateKeyException 
	 */
	public static ConfigurationParams create(String fileName, String moduleName) throws ConfigurationFileDuplicateKeyException, ConfigurationException {
		ConfigurationFile file = new ConfigurationFile(fileName);
		file.setExpandingEnvironmentVariables(true);
		return file.getModuleConfiguration(moduleName);
	}














	











	


	
	
	

	/**
	 * @return the ConfigurationFile
	 */
	public ConfigurationFile getConfigurationFile()
	{
		return m_ref;
	}

	/**
	 * @param iModuleName
	 *            the requested module's name
	 * @return the ConfigurationParams for the given module in this object's
	 *         ConfigurationFile
	 * @throws ConfigurationException
	 *             if iModuleName doesn't exist in this map
	 */
	public ConfigurationParams getSisterModuleConfiguration(String iModuleName)
			throws ConfigurationException
	{
		return m_ref.getModuleConfiguration(iModuleName);
	}

	/**
	 * @return name of current module/submodule
	 */
	public String getModuleName()
	{
		return m_moduleName;
	}

	// ////////////////////////////////////////////////////////////// protected // section ///////////////////////////////////////////////////////


	private static final long serialVersionUID = 7224479183627234556L;

	/**
	 * the ConfigurationFile
	 */
	protected ConfigurationFile m_ref = null;
	/**
	 * name of current module
	 */
	protected String m_moduleName = null;

	protected boolean expandingEnvironmentVariables = false;
}
